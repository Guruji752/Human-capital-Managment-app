# Generated by Django 2.1.7 on 2020-10-27 14:37

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import hrms_management.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('mobile_no', models.CharField(max_length=10, verbose_name='Mobile Number')),
                ('user_pics', models.FileField(upload_to='documents/admin_image/', verbose_name='Image')),
                ('start_date', models.CharField(default='', max_length=50, verbose_name='Start Date')),
                ('status', models.CharField(max_length=50, null=True)),
                ('gen_password', models.CharField(blank=True, default=hrms_management.models.User.f, max_length=20, null=True, verbose_name='Gen Password')),
                ('new_password', models.CharField(blank=True, default=hrms_management.models.User.f, max_length=20, null=True, verbose_name='Gen Password')),
                ('fcm_key', models.TextField(blank=True, null=True)),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('user_uniqueid', models.CharField(default='', max_length=1000, verbose_name='User Id')),
                ('is_active', models.BooleanField(default=1, verbose_name='Is Active')),
                ('is_sub_staff', models.BooleanField(default=0, verbose_name='Is Sub Staff')),
                ('manual_create_admin', models.BooleanField(default=1, verbose_name='Is Sub Staff')),
                ('allocate_user', models.BooleanField(default=False, verbose_name='Allocate user')),
                ('is_agent', models.BooleanField(default=False)),
                ('is_verification_agency', models.BooleanField(default=False)),
                ('is_legal_team', models.BooleanField(default=False)),
                ('is_technical_team', models.BooleanField(default=False)),
                ('is_valuation_team', models.BooleanField(default=False)),
                ('is_fraud_investigation_team', models.BooleanField(default=False)),
                ('is_document_verification_team', models.BooleanField(default=False)),
                ('is_client', models.BooleanField(default=False)),
                ('is_detailed_filled', models.BooleanField(default=False)),
                ('is_eligible', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'auth_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ActivityNotification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('body_messages', models.TextField(blank=True, default='', max_length=200, null=True)),
                ('is_read', models.BooleanField(default=0)),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('receiver', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='receiver_id', to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sender_id', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'notification_activity_user',
            },
        ),
        migrations.CreateModel(
            name='AdditionalTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('select_field', models.CharField(default='', max_length=200, null=True, verbose_name='Select Field')),
                ('master', models.CharField(default='', max_length=200, null=True, verbose_name=' Master')),
                ('Field_role', models.CharField(choices=[('Header', 'Header')], default='', max_length=200, null=True, verbose_name='Select Field Role')),
                ('form_display', models.CharField(choices=[('Horizontal', 'Horizontal'), (' Vertical', 'Vertical')], default='', max_length=200, null=True, verbose_name=' Form Diplay')),
                ('added', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('is_active', models.BooleanField(default=1)),
            ],
            options={
                'db_table': 'additional_template',
            },
        ),
        migrations.CreateModel(
            name='AllocationClientSupportClientCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=1)),
            ],
            options={
                'db_table': 'allocation_client_category_client_support',
            },
        ),
        migrations.CreateModel(
            name='AllocationClientSupportClientType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=1)),
            ],
            options={
                'db_table': 'allocation_client_support_client_type',
            },
        ),
        migrations.CreateModel(
            name='AllocationClientSupportProductCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=1)),
            ],
            options={
                'db_table': 'allocation_client_support_product_category',
            },
        ),
        migrations.CreateModel(
            name='AllocationClientSupportProductName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=1)),
            ],
            options={
                'db_table': 'allocation_client_support_product_name',
            },
        ),
        migrations.CreateModel(
            name='AllocationClientSupportUserCity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=1)),
            ],
            options={
                'db_table': 'allocation_matrix_client_support_city',
            },
        ),
        migrations.CreateModel(
            name='AllocationManagementManageReallocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('process_name', models.CharField(default='', max_length=200, verbose_name='Process Name')),
                ('description', models.CharField(default='', max_length=200, verbose_name='Description')),
                ('is_active', models.BooleanField(default=0)),
                ('existing_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='existing_user', to=settings.AUTH_USER_MODEL, verbose_name='Exist User')),
                ('new_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='new_user', to=settings.AUTH_USER_MODEL, verbose_name='New User')),
            ],
            options={
                'db_table': 'allocation_management_manage_reallocation',
            },
        ),
        migrations.CreateModel(
            name='AllocationManagementUpdateReallocationCriteria',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reallocation_criteria', models.CharField(default='', max_length=200, verbose_name='Reallocation Criteria')),
                ('description', models.CharField(default='', max_length=200, verbose_name='Description')),
                ('is_active', models.BooleanField(default=0)),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'allocation_management_update_reallocation_criterial',
            },
        ),
        migrations.CreateModel(
            name='AllocationMatrixClientSupport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=1)),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(blank=True, max_length=200, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'allocation_matrix_client_support',
            },
        ),
        migrations.CreateModel(
            name='AllocationMatrixLeadAllocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=1)),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(blank=True, max_length=200, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'allocation_matrix_lead_allocation',
            },
        ),
        migrations.CreateModel(
            name='AllocationMatrixLeadUserCity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=1)),
            ],
            options={
                'db_table': 'allocation_matrix_lead_allocation_city',
            },
        ),
        migrations.CreateModel(
            name='AllocationMatrixsClientSupport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=1)),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'allocation_matrixs_client_support',
            },
        ),
        migrations.CreateModel(
            name='AllocationMatrixVendorSupport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=1)),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(blank=True, max_length=200, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'allocation_matrix_vendor_support',
            },
        ),
        migrations.CreateModel(
            name='AllocationMatrixVendorSupportClientCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=1)),
            ],
            options={
                'db_table': 'allocation_matrix_vendor_support_client_category',
            },
        ),
        migrations.CreateModel(
            name='AllocationMatrixVendorSupportClientType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=1)),
            ],
            options={
                'db_table': 'llocation_matrix_vendor_support_client_type',
            },
        ),
        migrations.CreateModel(
            name='AllocationMatrixVendorSupportProductCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=1)),
            ],
            options={
                'db_table': 'allocation_matrix_vendor_support_product_category',
            },
        ),
        migrations.CreateModel(
            name='AllocationMatrixVendorSupportProductName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=1)),
            ],
            options={
                'db_table': 'llocation_matrix_vendor_support_product_name',
            },
        ),
        migrations.CreateModel(
            name='AllocationMatrixVendorSupportProductType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=1)),
            ],
            options={
                'db_table': 'allocation_matrix_vendor_support_product_type',
            },
        ),
        migrations.CreateModel(
            name='AllocationMatrixVendorSupportUserCity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=1)),
            ],
            options={
                'db_table': 'allocation_user_matrix_city_vendor_support',
            },
        ),
        migrations.CreateModel(
            name='AllocationProcessMultipleReallocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(default='', max_length=200, verbose_name='Description')),
                ('is_active', models.BooleanField(default=0)),
                ('allocation_reallocation', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.AllocationManagementManageReallocation', verbose_name='Reallocation Criteria')),
            ],
            options={
                'db_table': 'allocation_process_multiple_reallocation',
            },
        ),
        migrations.CreateModel(
            name='AllocationUserClientSupportProductType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=1)),
                ('client_support_allocation', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.AllocationMatrixClientSupport')),
            ],
            options={
                'db_table': 'allocation_matrix_client_support_product_type',
            },
        ),
        migrations.CreateModel(
            name='ApplicationForm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('select_field', models.CharField(default='', max_length=200, null=True, verbose_name='Select Field')),
                ('master', models.CharField(default='', max_length=200, null=True, verbose_name=' Master')),
                ('Field_role', models.CharField(choices=[('Header', 'Header')], default='', max_length=200, null=True, verbose_name='Select Field Role')),
                ('form_display', models.CharField(choices=[('Horizontal', 'Horizontal'), (' Vertical', 'Vertical')], default='', max_length=200, null=True, verbose_name=' Form Diplay')),
                ('added', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('is_active', models.BooleanField(default=1)),
            ],
            options={
                'db_table': 'application_form',
            },
        ),
        migrations.CreateModel(
            name='ApprovalMatrixDefineProcesLevel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('process_level', models.CharField(blank=True, default='', max_length=200, null=True, unique=True, verbose_name='Process Name')),
                ('description', models.CharField(blank=True, default='', max_length=200, null=True, verbose_name='Description')),
                ('is_active', models.BooleanField(default=0)),
                ('start_date', models.DateTimeField(blank=True, null=True, verbose_name='Start Date')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'manage_approval_matrix_define_process_level',
            },
        ),
        migrations.CreateModel(
            name='ApprovalMatrixiDefineApprovalLevel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('approval_level', models.CharField(blank=True, default='', max_length=50, null=True, unique=True, verbose_name='Approval Level')),
                ('description', models.CharField(blank=True, default='', max_length=200, null=True, verbose_name='Description')),
                ('is_active', models.BooleanField(default=0)),
                ('start_date', models.DateTimeField(blank=True, null=True, verbose_name='Start Date')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'approval_matrix_approval_level',
            },
        ),
        migrations.CreateModel(
            name='ApprovalMatrixMapApprovalLevelWithUsers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(blank=True, default='', max_length=200, null=True, verbose_name='Description')),
                ('start_date', models.DateTimeField(blank=True, null=True, verbose_name='Start Date')),
                ('is_active', models.BooleanField(default=0)),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User Id')),
            ],
            options={
                'db_table': 'approval_matrix_map_approval_level_with_users',
            },
        ),
        migrations.CreateModel(
            name='ApprovalMatrixMapApprovalLevelWithUsersClientCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'approval_matrix_map_approval_level_with_users_category',
            },
        ),
        migrations.CreateModel(
            name='ApprovalMatrixMapApprovalLevelWithUsersClientType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'approval_matrix_map_approval_level_with_users_client_type',
            },
        ),
        migrations.CreateModel(
            name='ApprovalMatrixMapApprovalLevelWithUsersLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'approval_matrix_map_approval_level_with_users_location',
            },
        ),
        migrations.CreateModel(
            name='ApprovalMatrixMapApprovalLevelWithUsersProcessLevel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('approval_level', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.ApprovalMatrixiDefineApprovalLevel', verbose_name='Approval Level')),
                ('map_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.ApprovalMatrixMapApprovalLevelWithUsers', verbose_name='User Id')),
            ],
            options={
                'db_table': 'approval_matrix_map_approval_level_with_users_process_level',
            },
        ),
        migrations.CreateModel(
            name='bulksms',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=100)),
                ('is_active', models.BooleanField(default=1)),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'bulk_sms',
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='City Name')),
                ('district', models.CharField(blank=True, max_length=500, null=True, verbose_name='District')),
                ('uploaded_by_admin', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'manage_master_city',
            },
        ),
        migrations.CreateModel(
            name='CompanyLocalCurrency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'company_local_currency',
            },
        ),
        migrations.CreateModel(
            name='CompanyReportingCurrency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'company_reporting_currency',
            },
        ),
        migrations.CreateModel(
            name='CompanySetup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_id', models.CharField(max_length=4, unique=True, verbose_name='Company Id')),
                ('name', models.CharField(max_length=200, verbose_name='Name')),
                ('building', models.CharField(default='', max_length=200, verbose_name='Building')),
                ('block_no', models.CharField(default='', max_length=200, verbose_name='Block Number')),
                ('sector', models.CharField(default='', max_length=200, verbose_name='Sector')),
                ('city', models.CharField(blank=True, max_length=200, null=True, verbose_name='City')),
                ('district', models.CharField(default='', max_length=200, verbose_name='District')),
                ('pincode', models.CharField(default='', max_length=8, verbose_name='Pin Code')),
                ('cin_no', models.CharField(default='', max_length=24, verbose_name='CIN Number')),
                ('pan_card', models.CharField(default='', max_length=10, verbose_name='Pan Card Number')),
                ('gst_no', models.CharField(default='', max_length=16, verbose_name='GST Number')),
                ('tan_no', models.CharField(default='', max_length=20, verbose_name='TAN Number')),
                ('website', models.CharField(default='', max_length=200, verbose_name='Website')),
                ('email_id', models.CharField(default='', max_length=30, verbose_name='Email Id')),
                ('contact_no', models.CharField(default='', max_length=10, verbose_name='Contact Number')),
                ('logo_upload', models.FileField(upload_to='documents/admin_image/', verbose_name='Upload Logo')),
                ('start_date', models.CharField(default='', max_length=200, verbose_name='Start Date')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=1, verbose_name='Is Active')),
            ],
            options={
                'verbose_name': 'Define Company',
                'db_table': 'manage_company',
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=100, null=True, unique=True, verbose_name='Country Name')),
                ('sortname', models.CharField(default='', max_length=100, null=True, verbose_name='Sort Name')),
                ('phoneCode', models.CharField(default='', max_length=100, null=True, verbose_name='Phone Code')),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'manage_master_country',
            },
        ),
        migrations.CreateModel(
            name='CurrencyRate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(blank=True, null=True, verbose_name='Date')),
                ('currency_type', models.CharField(default='', max_length=100, unique=True, verbose_name='Currency Type')),
                ('buy_rate', models.CharField(default='', max_length=100, verbose_name='Buy Rate')),
                ('sell_rate', models.CharField(default='', max_length=100, verbose_name='sell Rate')),
                ('average', models.CharField(default='', max_length=100, verbose_name='Average')),
                ('description', models.CharField(default='', max_length=300, verbose_name='Description')),
                ('is_active', models.BooleanField(default=1)),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'currency_rate',
            },
        ),
        migrations.CreateModel(
            name='CurrencySetup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(default='', max_length=250, verbose_name='Description')),
                ('is_active', models.BooleanField(default=1)),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('country', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.Country', verbose_name='Country')),
            ],
            options={
                'db_table': 'manage_currency_set_up',
            },
        ),
        migrations.CreateModel(
            name='CustomizeTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('template_type', models.CharField(blank=True, default='', max_length=200, null=True, unique=True, verbose_name='Template Type')),
                ('template_name', models.CharField(blank=True, default='', max_length=200, null=True, verbose_name='Template Name')),
                ('purpose', models.CharField(blank=True, default='', max_length=200, null=True, verbose_name='Purpose')),
                ('upload', models.FileField(upload_to='documents/%Y/%m/%d/', verbose_name='Template Upload')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=1)),
            ],
            options={
                'db_table': 'customized_templates',
            },
        ),
        migrations.CreateModel(
            name='DefineClientType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('client_type', models.CharField(default='', max_length=200, null=True, unique=True, verbose_name='Client Type')),
                ('purpose', models.CharField(blank=True, default='', max_length=200, null=True)),
                ('added', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('is_active', models.BooleanField(default=1)),
            ],
            options={
                'db_table': 'define_client_type',
            },
        ),
        migrations.CreateModel(
            name='DefinePermissionLevel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('permission_level', models.CharField(default='', max_length=250, verbose_name='Permission Level')),
                ('description', models.CharField(default='', max_length=250, verbose_name='Description')),
                ('is_active', models.BooleanField(default=1)),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'define_permission_level',
            },
        ),
        migrations.CreateModel(
            name='DefineProcessAllocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('process_name', models.CharField(default='', max_length=200, verbose_name='Name Of Process')),
                ('sub_process_name', models.CharField(blank=True, default='', max_length=200, null=True, verbose_name='SubProcess Name')),
                ('child_process_name', models.CharField(blank=True, default='', max_length=200, null=True, verbose_name='Child Process Name')),
                ('description', models.CharField(blank=True, default='', max_length=200, null=True, verbose_name='Description')),
                ('is_active', models.BooleanField(default=1)),
            ],
            options={
                'db_table': 'define_process_allocation_matrixx',
            },
        ),
        migrations.CreateModel(
            name='DefineProductType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_type', models.CharField(max_length=50, unique=True, verbose_name='Product Type')),
                ('description', models.CharField(blank=True, max_length=50, null=True)),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=1)),
            ],
            options={
                'db_table': 'define_product_type',
            },
        ),
        migrations.CreateModel(
            name='EscalationManagementManageEscalation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('escalation_level', models.CharField(default='', max_length=250, null=True, verbose_name='Escalation Level')),
                ('is_active', models.BooleanField(default=0)),
                ('effect_of_escalation_level', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.AllocationManagementUpdateReallocationCriteria', verbose_name='Effect of Escalation Level')),
                ('escalation_to', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Escalation to')),
                ('process_name', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.ApprovalMatrixDefineProcesLevel', verbose_name='Process Name')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.AllocationMatrixLeadAllocation', verbose_name='User')),
            ],
            options={
                'db_table': 'escalation_management_manage_escalation',
            },
        ),
        migrations.CreateModel(
            name='EscalationMatrixDefineLevel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.CharField(default='', max_length=250, unique=True)),
                ('is_active', models.BooleanField(default=1)),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Define Matrix Level',
                'db_table': 'escalation_matrix_define_level',
            },
        ),
        migrations.CreateModel(
            name='EscalationMatrixDefineTurnAroundTime',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tat_in_hours_days', models.CharField(default='', max_length=250, verbose_name='Turnaround Time In Minutes')),
                ('purpose', models.CharField(default='', max_length=250, verbose_name='Purpose')),
                ('remark', models.CharField(default='', max_length=250, verbose_name='Remark')),
                ('is_active', models.BooleanField(default=1)),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(blank=True, max_length=200, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'escalation_matrix_define_turn_around_time',
            },
        ),
        migrations.CreateModel(
            name='EscalationMatrixDefineTurnAroundTimeEscalationName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=1)),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('escalation_name', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.EscalationMatrixDefineLevel', verbose_name='Escalation Level')),
                ('turn_around', models.ForeignKey(blank=True, max_length=200, null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.EscalationMatrixDefineTurnAroundTime')),
            ],
            options={
                'db_table': 'escalation_matrix_define_turn_around_escalation_name',
            },
        ),
        migrations.CreateModel(
            name='EscalationMatrixDefineTurnAroundTimeProcessName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=1)),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('process_name_level', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.ApprovalMatrixDefineProcesLevel', verbose_name='Process Name')),
                ('turn_around', models.ForeignKey(blank=True, max_length=200, null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.EscalationMatrixDefineTurnAroundTime')),
            ],
            options={
                'db_table': 'escalation_matrix_define_turn_around_process_name',
            },
        ),
        migrations.CreateModel(
            name='EscalationMatrixDefineTurnAroundTimeUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=1)),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('escalation_user', models.ForeignKey(blank=True, max_length=200, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='escalation_to', to=settings.AUTH_USER_MODEL, verbose_name='Escalation To')),
                ('turn_around', models.ForeignKey(blank=True, max_length=200, null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.EscalationMatrixDefineTurnAroundTime')),
            ],
            options={
                'db_table': 'escalation_matrix_define_turn_around_user',
            },
        ),
        migrations.CreateModel(
            name='ImportanceofNotification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('importance_type', models.CharField(default='', max_length=250, verbose_name='Importance Type')),
                ('time_interval', models.IntegerField(default=0, verbose_name='Time Interval(In Minutes)')),
                ('purpose', models.CharField(default='', max_length=250, verbose_name='Description')),
                ('is_active', models.BooleanField(default=1, verbose_name='Is Active')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Define Importance Type',
                'db_table': 'import_of_notification',
            },
        ),
        migrations.CreateModel(
            name='LeadAllocationProcessName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=1)),
                ('lead_allocation', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.AllocationMatrixLeadAllocation')),
                ('process_name', models.ForeignKey(blank=True, max_length=200, null=True, on_delete=django.db.models.deletion.PROTECT, to='hrms_management.DefineProcessAllocation')),
            ],
            options={
                'db_table': 'lead_allocation_process_name',
            },
        ),
        migrations.CreateModel(
            name='mailsms',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=250)),
                ('is_active', models.BooleanField(default=1)),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'bulk_email',
            },
        ),
        migrations.CreateModel(
            name='ManageAssessmentYear',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('to_month', models.IntegerField(blank=True, default=0, null=True, verbose_name='To Month')),
                ('from_month', models.IntegerField(blank=True, default=0, null=True, verbose_name='From Month')),
                ('to_year', models.IntegerField(blank=True, default=0, null=True, verbose_name='To Year')),
                ('from_year', models.IntegerField(blank=True, default=0, null=True, verbose_name='From Year')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=1)),
            ],
            options={
                'db_table': 'manage_assessment_year',
            },
        ),
        migrations.CreateModel(
            name='ManageBranch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('branch_id', models.CharField(max_length=3, unique=True, verbose_name='Branch Id')),
                ('name_of_branch', models.CharField(default='', max_length=30, verbose_name='Branch Name')),
                ('building', models.CharField(default='', max_length=200, verbose_name='Building')),
                ('block_no', models.CharField(default='', max_length=200, verbose_name='Block Number')),
                ('sector', models.CharField(default='', max_length=200, verbose_name='Sector')),
                ('city', models.CharField(blank=True, max_length=200, null=True, verbose_name='City')),
                ('district', models.CharField(default='', max_length=200, verbose_name='District')),
                ('pincode', models.CharField(default='', max_length=8, verbose_name='Pin Code')),
                ('gst_no', models.CharField(default='', max_length=16, verbose_name='GST Number')),
                ('email_id', models.CharField(default='', max_length=30, verbose_name='Email Id')),
                ('contact_no', models.CharField(default='', max_length=10, verbose_name='Contact Number')),
                ('start_date', models.CharField(default='', max_length=200, verbose_name='Start Date')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=1, verbose_name='Is Active')),
                ('country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.Country', verbose_name='Country')),
            ],
            options={
                'verbose_name': 'Define Manage Branch',
                'db_table': 'manage_branch',
            },
        ),
        migrations.CreateModel(
            name='ManageBranchLocalCurrency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('branch_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.ManageBranch')),
            ],
            options={
                'db_table': 'manage_branch_local_currency',
            },
        ),
        migrations.CreateModel(
            name='ManageBranchReportingCurrency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('branch_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.ManageBranch')),
            ],
            options={
                'db_table': 'manage_branch_reporting_currency',
            },
        ),
        migrations.CreateModel(
            name='ManageClientCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('client_category', models.CharField(max_length=50, unique=True)),
                ('is_active', models.BooleanField(default=1)),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'manage_client_category',
            },
        ),
        migrations.CreateModel(
            name='ManageClientLead',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('define_lead_values', models.CharField(max_length=50)),
                ('is_active', models.BooleanField(default=1)),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'manage_client_lead',
            },
        ),
        migrations.CreateModel(
            name='ManageClientType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('client_type', models.CharField(max_length=50, unique=True)),
                ('is_active', models.BooleanField(default=1)),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'manage_client_type',
            },
        ),
        migrations.CreateModel(
            name='ManageClientTypeofData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_of_Data', models.CharField(max_length=50, unique=True)),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=1)),
            ],
            options={
                'db_table': 'manage_client_type_of_data',
            },
        ),
        migrations.CreateModel(
            name='ManageDepartment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('department', models.CharField(max_length=50, unique=True, verbose_name='Department')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=1)),
            ],
            options={
                'db_table': 'manage_department',
            },
        ),
        migrations.CreateModel(
            name='ManageDesignation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('designation', models.CharField(max_length=50, unique=True)),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=1)),
            ],
            options={
                'db_table': 'manage_designation',
            },
        ),
        migrations.CreateModel(
            name='ManageEscalationProcessName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('escalation', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.EscalationManagementManageEscalation', verbose_name='User Id')),
                ('process_name', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.DefineProcessAllocation', verbose_name='Process Name')),
            ],
            options={
                'db_table': 'manage_escalation_process_name',
            },
        ),
        migrations.CreateModel(
            name='ManageFinancialReport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('to_month', models.IntegerField(blank=True, default=0, null=True, verbose_name='To Month')),
                ('from_month', models.IntegerField(blank=True, default=0, null=True, verbose_name='From Month')),
                ('to_year', models.IntegerField(blank=True, default=0, null=True, verbose_name='To Year')),
                ('from_year', models.IntegerField(blank=True, default=0, null=True, verbose_name='From Year')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=1)),
            ],
            options={
                'db_table': 'manage_financial_report',
            },
        ),
        migrations.CreateModel(
            name='ManageFinancialYear',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('to_month', models.IntegerField(blank=True, default=0, null=True, verbose_name='To Month')),
                ('from_month', models.IntegerField(blank=True, default=0, null=True, verbose_name='From Month')),
                ('to_year', models.IntegerField(blank=True, default=0, null=True, verbose_name='To Year')),
                ('from_year', models.IntegerField(blank=True, default=0, null=True, verbose_name='From Year')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=1)),
            ],
            options={
                'db_table': 'manage_financial_year',
            },
        ),
        migrations.CreateModel(
            name='ManageHeadofficeLocalCurrency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'manage_head_office_local_currency',
            },
        ),
        migrations.CreateModel(
            name='ManageHeadofficeReportingCurrency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'manage_head_office_reporting_currency',
            },
        ),
        migrations.CreateModel(
            name='ManageHeadOfficeSetup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hod_id', models.CharField(max_length=4, unique=True, verbose_name='HOD id')),
                ('name', models.CharField(default='', max_length=30, verbose_name='Name')),
                ('building', models.CharField(default='', max_length=200, verbose_name='Building')),
                ('block_no', models.CharField(default='', max_length=200, verbose_name='Block Number')),
                ('sector', models.CharField(default='', max_length=200, verbose_name='Sector')),
                ('city', models.CharField(blank=True, max_length=200, null=True, verbose_name='City')),
                ('district', models.CharField(default='', max_length=200, verbose_name='District')),
                ('pincode', models.CharField(default='', max_length=8, verbose_name='Pin Code')),
                ('cin_no', models.CharField(default='', max_length=24, verbose_name='CIN Number')),
                ('pan_card', models.CharField(default='', max_length=10, verbose_name='Pan Card Number')),
                ('gst_no', models.CharField(default='', max_length=16, verbose_name='GST Number')),
                ('website', models.CharField(default='', max_length=200, verbose_name='Website')),
                ('email_id', models.CharField(default='', max_length=30, verbose_name='Email Id')),
                ('contact_no', models.CharField(default='', max_length=10, verbose_name='Contact Number')),
                ('is_active', models.BooleanField(default=1, verbose_name='Is Active')),
                ('start_date', models.CharField(default='', max_length=200, verbose_name='Start Date')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('country', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.Country', verbose_name='Country')),
            ],
            options={
                'verbose_name': 'Define Manage Head Office',
                'db_table': 'manage_head_office',
            },
        ),
        migrations.CreateModel(
            name='ManageHolidays',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('holidays_type', models.CharField(blank=True, default='', max_length=200, null=True, verbose_name='Holiday Type')),
                ('holidays_date', models.DateField(blank=True, null=True)),
                ('impact_on_salary', models.IntegerField(blank=True, choices=[(1, 'Yes'), (2, 'No')], default=1, null=True, verbose_name='Impact on Salary')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=1)),
                ('branch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.ManageBranch', verbose_name='Branch')),
                ('head_office', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.ManageHeadOfficeSetup', verbose_name='Head Office')),
                ('parent_company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.CompanySetup')),
            ],
            options={
                'verbose_name': 'Define Manage Holidays',
                'db_table': 'manage_holidays',
            },
        ),
        migrations.CreateModel(
            name='ManageHolidaysBranches',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('branch', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.ManageBranch', verbose_name='Branch')),
                ('holiday', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.ManageHolidays', verbose_name='Holiday')),
            ],
            options={
                'db_table': 'manage_holidays_branches',
            },
        ),
        migrations.CreateModel(
            name='ManageMonthEndProcess',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('monthandyear', models.DateField(blank=True, null=True, verbose_name='Month & Year')),
                ('extended_by_days', models.CharField(default='', max_length=2, verbose_name='Extended By Days')),
                ('new_date', models.CharField(default='', max_length=20, verbose_name='New Date')),
                ('description', models.CharField(default='', max_length=80)),
                ('is_active', models.BooleanField(default=1)),
                ('process_name', models.ForeignKey(blank=True, max_length=200, null=True, on_delete=django.db.models.deletion.PROTECT, to='hrms_management.DefineProcessAllocation')),
            ],
            options={
                'verbose_name': 'Manage Month End Process',
                'db_table': 'manage_month_end_process',
            },
        ),
        migrations.CreateModel(
            name='ManageOverTime',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date_time', models.CharField(blank=True, default='', max_length=200, null=True)),
                ('end_date_time', models.CharField(blank=True, default='', max_length=200, null=True)),
                ('impact_on_salary', models.IntegerField(blank=True, choices=[(1, 'Yes'), (2, 'No')], default=1, null=True)),
                ('days', models.CharField(blank=True, choices=[('Monday', 'Monday'), ('Tuesday', 'Tuesday'), ('Wednesday', 'Wednesday'), ('Thursday', 'Thursday'), ('Friday', 'Friday'), ('Saturday', 'Saturday'), ('Sunday', 'Sunday')], default='', max_length=200, null=True)),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=1)),
                ('head_office', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.ManageHeadOfficeSetup', verbose_name='Head Office')),
                ('parent_com', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.CompanySetup', verbose_name='Parent Company')),
            ],
            options={
                'db_table': 'manage_over_time',
            },
        ),
        migrations.CreateModel(
            name='ManageOvertimeApplicable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=1)),
                ('brach', models.ForeignKey(blank=True, max_length=200, null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.ManageBranch')),
                ('over_time', models.ForeignKey(blank=True, max_length=200, null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.ManageOverTime')),
            ],
            options={
                'db_table': 'manage_over_time_aplicable',
            },
        ),
        migrations.CreateModel(
            name='ManagePermissionLevel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('permission_level', models.CharField(default='', max_length=250, verbose_name='Permission Level')),
                ('description', models.CharField(default='', max_length=250, verbose_name='Description')),
                ('is_active', models.BooleanField(default=1)),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Define Permission Level',
                'db_table': 'manage_permission_level',
            },
        ),
        migrations.CreateModel(
            name='ManagePermissionReportingHierarchy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('designation', models.CharField(default='', max_length=250, verbose_name='Designation')),
                ('department', models.CharField(default='', max_length=250, verbose_name='Department')),
                ('responsibility', models.CharField(default='', max_length=250, verbose_name='Responsibilities')),
                ('is_active', models.BooleanField(default=1)),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('reporting_level', models.ForeignKey(max_length=200, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.ManagePermissionLevel')),
            ],
            options={
                'db_table': 'manage_permission_reporting_hierarchy',
            },
        ),
        migrations.CreateModel(
            name='ManagePermissionReportingLevel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=250, verbose_name='Name')),
                ('is_active', models.BooleanField(default=1)),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'manage_permission_reporting_level',
            },
        ),
        migrations.CreateModel(
            name='ManagePermissionReportingType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=250, verbose_name='Name')),
                ('is_active', models.BooleanField(default=1)),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Define Permission Reporting Type',
                'db_table': 'manage_permission_reporting_type',
            },
        ),
        migrations.CreateModel(
            name='ManagePermissionTypes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('permission_type', models.CharField(default='', max_length=250, verbose_name='Permission Type')),
                ('description', models.CharField(default='', max_length=250, verbose_name='Description')),
                ('is_active', models.BooleanField(default=1)),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Define Permission Type',
                'db_table': 'manage_permission_types',
            },
        ),
        migrations.CreateModel(
            name='ManagePricing',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_type', models.CharField(blank=True, max_length=50, null=True, unique=True, verbose_name='Product Type')),
                ('product_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='Product Name')),
                ('revenue_type', models.CharField(blank=True, max_length=50, null=True, verbose_name='Revenue Type')),
                ('revenue_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='Revenue Name')),
                ('revenue_rate', models.CharField(blank=True, max_length=50, null=True, verbose_name='Revenue Rate')),
                ('taxation_type', models.CharField(blank=True, max_length=50, null=True, verbose_name='Taxation Type')),
                ('taxation_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='Taxation Name')),
                ('rate', models.CharField(blank=True, max_length=50, null=True, verbose_name='Rate')),
                ('description', models.CharField(blank=True, max_length=50, null=True)),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=1)),
            ],
            options={
                'db_table': 'manage_managepricing',
            },
        ),
        migrations.CreateModel(
            name='ManageProductCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_category', models.CharField(blank=True, max_length=50, null=True, unique=True, verbose_name='Product Category')),
                ('description', models.CharField(blank=True, max_length=50, null=True)),
                ('start_date', models.CharField(blank=True, max_length=50, null=True)),
                ('end_date', models.CharField(blank=True, max_length=50, null=True)),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=1)),
            ],
            options={
                'db_table': 'manage_product_category',
            },
        ),
        migrations.CreateModel(
            name='ManageProductName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_name', models.CharField(blank=True, max_length=50, null=True, unique=True, verbose_name='Product Name')),
                ('description', models.CharField(blank=True, max_length=50, null=True)),
                ('start_date', models.DateField(blank=True, null=True)),
                ('end_date', models.DateField(blank=True, null=True)),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=1)),
            ],
            options={
                'db_table': 'manage_product_name',
            },
        ),
        migrations.CreateModel(
            name='ManageProducts',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_type', models.CharField(blank=True, default='', max_length=200, null=True, verbose_name='Product Type')),
                ('product_name', models.CharField(blank=True, default='', max_length=200, null=True, verbose_name='Product Name')),
                ('description', models.CharField(blank=True, default='', max_length=280, null=True)),
                ('is_active', models.BooleanField(default=1)),
            ],
            options={
                'db_table': 'manage_product',
            },
        ),
        migrations.CreateModel(
            name='ManageProductType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_type', models.CharField(max_length=50, unique=True, verbose_name='Product Type')),
                ('product_description', models.CharField(max_length=50, verbose_name='Product Description')),
                ('start_date', models.CharField(max_length=50)),
                ('end_date', models.CharField(max_length=50)),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=1)),
            ],
            options={
                'db_table': 'manage_product_type',
            },
        ),
        migrations.CreateModel(
            name='ManageResponsibility',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('responsibilities', models.CharField(max_length=50, unique=True, verbose_name='Responsibility')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=1)),
            ],
            options={
                'db_table': 'manage_responsibilities',
            },
        ),
        migrations.CreateModel(
            name='ManageUpdateEmploymentType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('employee_type', models.CharField(max_length=50, unique=True, verbose_name='Employment Type')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=1)),
            ],
            options={
                'db_table': 'manage_employmenttype',
            },
        ),
        migrations.CreateModel(
            name='ManageUpdateRevenue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('revenue_type', models.CharField(blank=True, max_length=50, null=True, unique=True, verbose_name='Revenue Type')),
                ('revenue_name', models.CharField(blank=True, max_length=50, null=True, unique=True, verbose_name='Revenue Name')),
                ('description', models.CharField(blank=True, max_length=50, null=True)),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=1)),
            ],
            options={
                'db_table': 'manage_updaterevenue',
            },
        ),
        migrations.CreateModel(
            name='ManageUpdateTaxRates',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('taxation_type', models.CharField(blank=True, max_length=50, null=True, unique=True, verbose_name='Taxation Type')),
                ('taxation_name', models.CharField(blank=True, max_length=50, null=True, unique=True, verbose_name='Taxation Name')),
                ('rate', models.CharField(blank=True, max_length=50, null=True, unique=True, verbose_name='Rate')),
                ('description', models.CharField(blank=True, max_length=50, null=True)),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=1)),
            ],
            options={
                'db_table': 'manage_updateupdatetaxrates',
            },
        ),
        migrations.CreateModel(
            name='ManageUserMultipleRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=1)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User Id')),
            ],
            options={
                'db_table': 'manage_user_multiple_role',
            },
        ),
        migrations.CreateModel(
            name='ManageWorkingDays',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weekly_working_days', models.CharField(blank=True, choices=[('Monday', 'Monday'), ('Tuesday', 'Tuesday'), ('Wednesday', 'Wednesday'), ('Thursday', 'Thursday'), ('Friday', 'Friday'), ('Saturday', 'Saturday'), ('Sunday', 'Sunday')], default='', max_length=200, null=True, verbose_name='Weekly Working Days')),
                ('weekly_off_working_days', models.CharField(blank=True, default='', max_length=200, null=True, verbose_name='Weekly Off Working Days')),
                ('half_days', models.CharField(blank=True, default='', max_length=200, null=True, verbose_name='Weekly Off Working Days')),
                ('alternate_week', models.IntegerField(blank=True, default=0, null=True, verbose_name='Alternate Week')),
                ('alternate_week_days', models.CharField(blank=True, default='', max_length=200, null=True, verbose_name='Weekly Off Working Days')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=1)),
            ],
            options={
                'verbose_name': 'Define Working Days',
                'db_table': 'manage_working_days',
            },
        ),
        migrations.CreateModel(
            name='ManageWorkingHours',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('working_days', models.IntegerField(blank=True, choices=[(1, 'Normal Working Days'), (2, 'Week end working Days'), (2, 'Half Working Days')], default=1, null=True, unique=True, verbose_name='Working Days')),
                ('start_date_time', models.CharField(blank=True, default='', max_length=200, null=True, verbose_name='Start Time')),
                ('end_date_time', models.CharField(blank=True, default='', max_length=200, null=True, verbose_name='End Time')),
                ('lunch_break_from', models.CharField(blank=True, default='', max_length=200, null=True, verbose_name='Lunch Break')),
                ('lunch_break_to', models.CharField(blank=True, default='', max_length=200, null=True, verbose_name='Lunch Break')),
                ('logout_time', models.CharField(blank=True, default='', max_length=200, null=True, verbose_name='Logout Time')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=1)),
            ],
            options={
                'db_table': 'manage_working_hours',
            },
        ),
        migrations.CreateModel(
            name='MapApprovalLevelWithJointApproval',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_name', models.CharField(default='', max_length=200, null=True, verbose_name='Group Name')),
                ('no_of_users', models.CharField(default='', max_length=200, null=True, verbose_name='No of Users')),
                ('works_flow_process', models.CharField(blank=True, default='', max_length=200, null=True, verbose_name='Work Flow Process')),
                ('user_joint_approval', models.CharField(blank=True, default='', max_length=200, null=True, verbose_name='User Name')),
                ('loan_limit', models.CharField(default='', max_length=200, null=True, verbose_name='Loan Limit')),
                ('approval_level', models.CharField(blank=True, default='', max_length=200, null=True, verbose_name='Approval Level')),
                ('is_active', models.BooleanField(default=1)),
                ('department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.ManageDepartment', verbose_name='Department')),
                ('designation', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.ManageDesignation', verbose_name='Designation')),
                ('responsibilities', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='hrms_management.ManageResponsibility', verbose_name='Responsibilities')),
            ],
            options={
                'verbose_name': 'Map Joint Approval',
                'db_table': 'map_approval_matrix_joint_approval',
            },
        ),
        migrations.CreateModel(
            name='MapApprovalLevelWithJointApprovalUsers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('map_joint_user', models.ForeignKey(blank=True, max_length=200, null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.MapApprovalLevelWithJointApproval')),
                ('users', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Process Name')),
            ],
            options={
                'db_table': 'joint_approval_users_name',
            },
        ),
        migrations.CreateModel(
            name='MapApprovalMatrixWithusersProcessName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('map_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.ApprovalMatrixMapApprovalLevelWithUsers', verbose_name='User Id')),
                ('process', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.ApprovalMatrixDefineProcesLevel', verbose_name='Process Name')),
            ],
            options={
                'db_table': 'map_approval_matrix_with_users_process_name',
            },
        ),
        migrations.CreateModel(
            name='MapApprovalMatrixWithUsersProductCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('map_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.ApprovalMatrixMapApprovalLevelWithUsers', verbose_name='User Id')),
                ('product_category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.ManageProductCategory', verbose_name='Product Category')),
            ],
            options={
                'db_table': 'map_approval_matrix_with_users_product_category',
            },
        ),
        migrations.CreateModel(
            name='MapApprovalMatrixWithUsersProductName',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('map_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.ApprovalMatrixMapApprovalLevelWithUsers', verbose_name='User Id')),
                ('product_name', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.ManageProductName', verbose_name='Product Category')),
            ],
            options={
                'db_table': 'map_approval_matrix_with_users_product_name',
            },
        ),
        migrations.CreateModel(
            name='MapApprovalMatrixWithUsersProductType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('map_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.ApprovalMatrixMapApprovalLevelWithUsers', verbose_name='User Id')),
                ('product_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.ManageProductType', verbose_name='Product Type')),
            ],
            options={
                'db_table': 'map_approval_matrix_with_users_product_type',
            },
        ),
        migrations.CreateModel(
            name='MapCityBranches',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=1, verbose_name='Is Activate')),
                ('branch', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.ManageBranch', verbose_name='Branch')),
                ('country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.Country', verbose_name='Country')),
                ('head_office', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.ManageHeadOfficeSetup', verbose_name='Head Office')),
                ('parent_company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.CompanySetup', verbose_name='Parent Company')),
            ],
            options={
                'db_table': 'manage_map_city',
            },
        ),
        migrations.CreateModel(
            name='MapCityMultipleWithBranches',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=1)),
                ('city', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.City', verbose_name='City')),
                ('city_map', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.MapCityBranches', verbose_name='map_city')),
            ],
            options={
                'db_table': 'manage_city_with_multiple_branches',
            },
        ),
        migrations.CreateModel(
            name='MisManagePerformanceDefineTarget',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('target_type', models.CharField(blank=True, default='', max_length=200, null=True, verbose_name='Target Type')),
                ('target', models.CharField(blank=True, default='', max_length=250, null=True, verbose_name='Target')),
                ('period_of_type', models.CharField(blank=True, default='', max_length=200, null=True, verbose_name='Period For Target')),
                ('nature_of_target', models.IntegerField(default=0, verbose_name='Nature of Target')),
                ('description', models.CharField(blank=True, default='', max_length=250)),
                ('is_active', models.BooleanField(default=1)),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'db_table': 'mis_manage_performance_define_target',
            },
        ),
        migrations.CreateModel(
            name='MisManageReportingReportFormat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('format_type', models.CharField(blank=True, default='', max_length=250, verbose_name='Format Type')),
                ('description', models.CharField(blank=True, default='', max_length=250, verbose_name='Description')),
                ('is_active', models.BooleanField(default=1)),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'mis_manage_reporting_report_format',
            },
        ),
        migrations.CreateModel(
            name='MisManageReportingReportFrequency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reporting_frequency', models.CharField(blank=True, default='', max_length=250, verbose_name='Format Type')),
                ('description', models.CharField(blank=True, default='', max_length=250, verbose_name='Description')),
                ('is_active', models.BooleanField(default=1)),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'mis_manage_reporting_report_frequency',
            },
        ),
        migrations.CreateModel(
            name='MisManageReportingReportFrequencyTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('activity_level', models.IntegerField(choices=[(1, 'SMS and Mail Campaign'), (2, 'Data Management'), (3, 'Lead Allocation'), (4, 'Lead Generation'), (5, 'Lead Confirmations'), (6, 'Lead Verification'), (7, 'Follow ups'), (8, 'Meeting Scheduled'), (9, 'Business Conversion'), (10, 'Rejected Leads')], default=0, verbose_name='Activity Level')),
                ('peridodic_level', models.CharField(blank=True, default='', max_length=200, null=True, verbose_name='Period For Target')),
                ('is_active', models.BooleanField(default=1)),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'mis_manage_reporting_report_template',
            },
        ),
        migrations.CreateModel(
            name='MisManageReportingReportFrequencyTemplateCompany',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('head_office', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.ManageHeadOfficeSetup', verbose_name='Place of Posting')),
                ('parent_company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.CompanySetup', verbose_name='Place Of Working')),
                ('template', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.MisManageReportingReportFrequencyTemplate')),
            ],
            options={
                'db_table': 'mis_manage_reporting_report_template_company',
            },
        ),
        migrations.CreateModel(
            name='MisManageReportingReportFrequencyTemplateUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=1)),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('template', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.MisManageReportingReportFrequencyTemplate')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'mis_manage_reporting_report_template_user',
            },
        ),
        migrations.CreateModel(
            name='NotificationAction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_action', models.CharField(default='', max_length=250, unique=True, verbose_name='Notification Action')),
                ('description', models.CharField(default='', max_length=250, verbose_name='Description')),
                ('is_active', models.BooleanField(default=1, verbose_name='Is Active')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Define Notification Action',
                'db_table': 'notification_action',
            },
        ),
        migrations.CreateModel(
            name='NotificationFrequency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_frequency', models.CharField(default='', max_length=250, verbose_name='Frequency Type')),
                ('days', models.CharField(choices=[('Monday', 'Monday'), ('Tuesday', 'Tuesday'), ('Wednesday', 'Wednesday'), ('Thursday', 'Thursday'), ('Friday', 'Friday'), ('Saturday', 'Saturday'), ('Sunday', 'Sunday')], default='', max_length=250, verbose_name='Days')),
                ('date', models.DateField(blank=True, null=True, verbose_name='Date')),
                ('purpose', models.CharField(default='', max_length=250, verbose_name='Description')),
                ('time', models.CharField(default='', max_length=250, verbose_name='Timing')),
                ('is_active', models.BooleanField(default=1, verbose_name='Is Active')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Define Notification Frequency',
                'db_table': 'notification_frequency',
            },
        ),
        migrations.CreateModel(
            name='NotificationGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_group', models.CharField(default='', max_length=250, verbose_name='Notification Group')),
                ('purpose', models.CharField(default='', max_length=250, verbose_name='Description')),
                ('is_active', models.BooleanField(default=1, verbose_name='Is Active')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'notification_group',
            },
        ),
        migrations.CreateModel(
            name='NotificationSubject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_subject', models.CharField(default='', max_length=250, unique=True, verbose_name='Notification Method')),
                ('description', models.CharField(default='', max_length=250, verbose_name='Description')),
                ('is_active', models.BooleanField(default=1, verbose_name='Is Active')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Define Notification Method',
                'db_table': 'notification_subject',
            },
        ),
        migrations.CreateModel(
            name='NotificationType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(default='', max_length=250, verbose_name='Notification Type')),
                ('purpose', models.CharField(default='', max_length=250, verbose_name='Description')),
                ('is_active', models.BooleanField(default=1, verbose_name='Is Active')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Define Notification Type',
                'db_table': 'notification_type',
            },
        ),
        migrations.CreateModel(
            name='ProcessNameWithNumberOfData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=0)),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('process_name', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.ApprovalMatrixDefineProcesLevel', verbose_name='Process Name')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User Id')),
            ],
            options={
                'db_table': 'process_name_with_number_of_data',
            },
        ),
        migrations.CreateModel(
            name='ProductFacility',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_facility', models.CharField(blank=True, max_length=50, null=True, unique=True, verbose_name='Product Facility')),
                ('description', models.CharField(blank=True, max_length=50, null=True)),
                ('start_date', models.CharField(blank=True, max_length=50, null=True)),
                ('end_date', models.CharField(blank=True, max_length=50, null=True)),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=1)),
            ],
            options={
                'db_table': 'product_facility',
            },
        ),
        migrations.CreateModel(
            name='PurposeofCurrency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('purpose_of_currency', models.CharField(default='', max_length=100, unique=True, verbose_name='Purpose of Currency')),
                ('is_active', models.BooleanField(default=1)),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'manage_purpose_of_currency',
            },
        ),
        migrations.CreateModel(
            name='ResponseMangement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='', max_length=200, null=True, verbose_name='Name')),
                ('type_of_response', models.CharField(blank=True, default='', max_length=200, null=True, verbose_name='Type of Response')),
                ('description', models.CharField(blank=True, default='', max_length=200, null=True, verbose_name='Description')),
                ('impace_on_data', models.CharField(blank=True, default='', max_length=200, null=True, verbose_name='Impact on Data')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=1)),
            ],
            options={
                'db_table': 'manage_response',
            },
        ),
        migrations.CreateModel(
            name='RoleMangement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='', max_length=200, null=True, verbose_name='Name')),
                ('sequence', models.IntegerField(blank=True, default=0, null=True, verbose_name='sequence')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=1)),
            ],
            options={
                'db_table': 'manage_role',
            },
        ),
        migrations.CreateModel(
            name='setupescalationmatrixdefinelevel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.CharField(default='', max_length=250, null=True, unique=True)),
                ('description', models.CharField(blank=True, default='', max_length=200, null=True, verbose_name='Description')),
                ('is_active', models.BooleanField(default=1)),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'setup_escalation_matrix_define_level',
            },
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='State Name')),
                ('is_active', models.BooleanField(default=True)),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hrms_management.Country', verbose_name='Country')),
            ],
            options={
                'db_table': 'manage_master_state',
            },
        ),
        migrations.CreateModel(
            name='TargetAudience',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('target_audience', models.CharField(default='', max_length=250, verbose_name='Target Audience')),
                ('source', models.CharField(default='', max_length=250, verbose_name='Source')),
                ('purpose', models.CharField(default='', max_length=250, verbose_name='Description')),
                ('is_active', models.BooleanField(default=1, verbose_name='Is Active')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Define Target Audience',
                'db_table': 'target_audience',
            },
        ),
        migrations.CreateModel(
            name='TemplateCreateFields',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subfield_name', models.CharField(default='', max_length=200, null=True, verbose_name=' Field ')),
                ('length_of_field', models.CharField(blank=True, default='', max_length=200, null=True, verbose_name='Length Of Field ')),
                ('field_type', models.CharField(blank=True, choices=[('text', 'Text'), ('email', 'Email'), ('file', 'File'), ('number', 'Number'), ('date', 'Date'), ('url', 'Url'), ('week', 'Week'), ('month', 'Month'), ('tel', 'Tel'), ('time', 'Time'), ('select', 'DropDown'), ('textarea', 'TextArea')], default='', max_length=200, null=True, verbose_name='Field Type')),
                ('validation_required', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], default='', max_length=200, null=True, verbose_name='validation Required')),
                ('validation_type', models.CharField(blank=True, choices=[('Plain Text', 'Plain Text'), ('DD/MM/YYYY', 'DD/MM/YYYY'), ('MM/DD/YYYY', 'MM/DD/YYYY'), ('DD/MM/YYYY With Time', 'DD/MM/YYYY With Time'), ('Alpbhanumeric', 'Alpbhanumeric'), ('Formula', 'Formula'), ('HH:MM', 'HH:MM'), ('Numbers', 'Numbers')], default='', max_length=200, null=True, verbose_name='validation Type')),
                ('mandatory', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], default='', max_length=200, null=True, verbose_name='Mandatory')),
                ('sort_order', models.IntegerField(blank=True, default=0, null=True)),
                ('select_model', models.CharField(blank=True, default='', max_length=200, null=True, verbose_name='Select Form')),
            ],
            options={
                'db_table': 'template_create_fields',
            },
        ),
        migrations.CreateModel(
            name='TemplateForNotification',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_subject', models.CharField(default='', max_length=250, verbose_name='Subject')),
                ('template', models.CharField(default='', max_length=250, verbose_name='Template')),
                ('is_active', models.BooleanField(default=1)),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('action', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.NotificationAction', verbose_name='Action')),
                ('notification_frequency_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.NotificationFrequency', verbose_name='Notification Frequency Type')),
                ('notification_importance', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.ImportanceofNotification', verbose_name='Audience Importance')),
                ('notification_method', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.NotificationSubject', verbose_name='Notification Method')),
                ('notification_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.NotificationType', verbose_name='Notification Type')),
                ('target_audience', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='notification_target_audience', to='hrms_management.TargetAudience', verbose_name='Target Audience')),
            ],
            options={
                'db_table': 'template_for_notification',
            },
        ),
        migrations.CreateModel(
            name='TemplateSetupClientCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=1)),
            ],
            options={
                'db_table': 'temaplate_set_up_client_category',
            },
        ),
        migrations.CreateModel(
            name='TemplateSetupClientType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=1)),
            ],
            options={
                'db_table': 'template_set_up_client_type',
            },
        ),
        migrations.CreateModel(
            name='TypeofCurrency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_of_currency', models.CharField(default='', max_length=100, unique=True, verbose_name='Type of Currency')),
                ('is_active', models.BooleanField(default=1)),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'manage_type_of_currency',
            },
        ),
        migrations.CreateModel(
            name='UnitValue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unit_value', models.CharField(blank=True, max_length=50, null=True, unique=True, verbose_name='Unit Value ')),
                ('description', models.CharField(blank=True, max_length=50, null=True)),
                ('start_date', models.CharField(blank=True, max_length=50, null=True)),
                ('end_date', models.CharField(blank=True, max_length=50, null=True)),
                ('added', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('is_active', models.BooleanField(default=1)),
            ],
            options={
                'db_table': 'unit_value',
            },
        ),
        migrations.CreateModel(
            name='UpdatePurposeofTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('purpose', models.CharField(default='', max_length=200, null=True)),
                ('description', models.CharField(blank=True, default='', max_length=200, null=True)),
                ('added', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('is_active', models.BooleanField(default=1)),
                ('template_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.CustomizeTemplate', verbose_name='Template Type')),
            ],
            options={
                'db_table': 'define_template_purpose',
            },
        ),
        migrations.CreateModel(
            name='UpdateTemplateRequirement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('client_role', models.CharField(blank=True, default='', max_length=200, null=True, verbose_name='Client Role')),
                ('added', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('is_active', models.BooleanField(default=1)),
                ('client_category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.ManageClientCategory', verbose_name='Client Category')),
                ('client_type', models.ForeignKey(blank=True, max_length=200, null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.ManageClientType')),
            ],
            options={
                'db_table': 'update_template_requirement',
            },
        ),
        migrations.CreateModel(
            name='UpdateTemplateType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(blank=True, default='', max_length=200, null=True)),
                ('added', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated', models.DateTimeField(auto_now=True, null=True)),
                ('is_active', models.BooleanField(default=1)),
                ('template_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.CustomizeTemplate', verbose_name='Template Type')),
            ],
            options={
                'db_table': 'update_template_type',
            },
        ),
        migrations.CreateModel(
            name='UserAccessPermissonModelsPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('main_function', models.IntegerField(blank=True, default=0, null=True)),
                ('function_level', models.CharField(default='', max_length=250)),
                ('sub_function_level', models.CharField(default='', max_length=250)),
                ('add', models.BooleanField(default=False)),
                ('edit', models.BooleanField(default=False)),
                ('delete', models.BooleanField(default=False)),
                ('view', models.BooleanField(default=False)),
                ('sequence', models.IntegerField(blank=True, default=0, null=True)),
                ('sub_menu_sequence', models.IntegerField(blank=True, default=0, null=True)),
                ('is_active', models.BooleanField(default=1)),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_access_models_permission',
            },
        ),
        migrations.CreateModel(
            name='UserMultipleBranch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=1)),
                ('branch_allocated', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.ManageBranch')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'manage_user_multiple_branch',
            },
        ),
        migrations.CreateModel(
            name='UserMultipleBranchReporting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('brach', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.ManageBranch')),
                ('template', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.MisManageReportingReportFrequencyTemplate')),
            ],
            options={
                'db_table': 'mis_manage_reporting_report_template_branches',
            },
        ),
        migrations.CreateModel(
            name='UserType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_type', models.CharField(blank=True, max_length=50, null=True, unique=True)),
                ('is_agent', models.BooleanField(default=False)),
                ('is_sales', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=1)),
            ],
            options={
                'db_table': 'users_type',
            },
        ),
        migrations.AddField(
            model_name='notificationgroup',
            name='notification_method',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.NotificationSubject', verbose_name='Notification Method'),
        ),
        migrations.AddField(
            model_name='notificationgroup',
            name='notification_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.NotificationType', verbose_name='Notification Type'),
        ),
        migrations.AddField(
            model_name='manageusermultiplerole',
            name='user_role',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.RoleMangement', verbose_name='Role'),
        ),
        migrations.AddField(
            model_name='manageupdatetaxrates',
            name='unit_value',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.UnitValue'),
        ),
        migrations.AddField(
            model_name='managepricing',
            name='unit_value',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.UnitValue'),
        ),
        migrations.AddField(
            model_name='managepermissionreportinghierarchy',
            name='reporting_type',
            field=models.ForeignKey(max_length=200, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.ManagePermissionReportingType'),
        ),
        migrations.AddField(
            model_name='managepermissionreportinghierarchy',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='manageheadofficesetup',
            name='local_currency',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='office_local_currency', to='hrms_management.TypeofCurrency', verbose_name='Local Currency'),
        ),
        migrations.AddField(
            model_name='manageheadofficesetup',
            name='parent_company',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.CompanySetup', verbose_name='Parent Company'),
        ),
        migrations.AddField(
            model_name='manageheadofficesetup',
            name='reporting_currency',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='office_reporting_currency', to='hrms_management.TypeofCurrency', verbose_name='Reporting Currency'),
        ),
        migrations.AddField(
            model_name='manageheadofficesetup',
            name='state',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.State', verbose_name='State'),
        ),
        migrations.AddField(
            model_name='manageheadofficereportingcurrency',
            name='head_office',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.ManageHeadOfficeSetup', verbose_name='Head Office'),
        ),
        migrations.AddField(
            model_name='manageheadofficereportingcurrency',
            name='reporting_currency',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reporting_currency_manageoffice_one_to_many', to='hrms_management.TypeofCurrency', verbose_name='Reporting Currency'),
        ),
        migrations.AddField(
            model_name='manageheadofficelocalcurrency',
            name='head_office',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.ManageHeadOfficeSetup', verbose_name='Head Office'),
        ),
        migrations.AddField(
            model_name='manageheadofficelocalcurrency',
            name='local_currency',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='local_currency_manageoffice_com_one_to_many', to='hrms_management.TypeofCurrency', verbose_name='Local Currency'),
        ),
        migrations.AddField(
            model_name='managebranchreportingcurrency',
            name='reporting_currency',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reporting_currency_managebranch_one_to_many', to='hrms_management.TypeofCurrency', verbose_name='Reporting Currency'),
        ),
        migrations.AddField(
            model_name='managebranchlocalcurrency',
            name='local_currency',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='local_currency_managebranch_com_one_to_many', to='hrms_management.TypeofCurrency', verbose_name='Local Currency'),
        ),
        migrations.AddField(
            model_name='managebranch',
            name='head_office',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.ManageHeadOfficeSetup', verbose_name='Head Office'),
        ),
        migrations.AddField(
            model_name='managebranch',
            name='local_currency',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='branch_local_currency', to='hrms_management.TypeofCurrency', verbose_name='Local Currency'),
        ),
        migrations.AddField(
            model_name='managebranch',
            name='parent_company',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.CompanySetup', verbose_name='Parent Company'),
        ),
        migrations.AddField(
            model_name='managebranch',
            name='reporting_currency',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='branch_reporting_currency', to='hrms_management.TypeofCurrency', verbose_name='Reporting Currency'),
        ),
        migrations.AddField(
            model_name='managebranch',
            name='state',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.State', verbose_name='State'),
        ),
        migrations.AddField(
            model_name='escalationmatrixdefinelevel',
            name='department',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.ManageDepartment'),
        ),
        migrations.AddField(
            model_name='escalationmatrixdefinelevel',
            name='designation',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.ManageDesignation'),
        ),
        migrations.AddField(
            model_name='escalationmatrixdefinelevel',
            name='location',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.ManageBranch', verbose_name='Location'),
        ),
        migrations.AddField(
            model_name='currencysetup',
            name='purpose_of_currency',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.PurposeofCurrency', verbose_name='Purpose of Currency'),
        ),
        migrations.AddField(
            model_name='currencysetup',
            name='type_of_currency',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.TypeofCurrency', verbose_name='Type of Currency'),
        ),
        migrations.AddField(
            model_name='companysetup',
            name='country',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.Country', verbose_name='Country'),
        ),
        migrations.AddField(
            model_name='companysetup',
            name='local_currency',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='local_currency', to='hrms_management.TypeofCurrency', verbose_name='Local Currency'),
        ),
        migrations.AddField(
            model_name='companysetup',
            name='reporting_currency',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reporting_currency', to='hrms_management.TypeofCurrency', verbose_name='Reporting Currency'),
        ),
        migrations.AddField(
            model_name='companysetup',
            name='state',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.State', verbose_name='State'),
        ),
        migrations.AddField(
            model_name='companyreportingcurrency',
            name='parent_company',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.CompanySetup'),
        ),
        migrations.AddField(
            model_name='companyreportingcurrency',
            name='reporting_currency',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reporting_currency_parnt_one_to_many', to='hrms_management.TypeofCurrency', verbose_name='Reporting Currency'),
        ),
        migrations.AddField(
            model_name='companylocalcurrency',
            name='local_currency',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='local_currency_parent_com_one_to_many', to='hrms_management.TypeofCurrency', verbose_name='Local Currency'),
        ),
        migrations.AddField(
            model_name='companylocalcurrency',
            name='parent_company',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.CompanySetup'),
        ),
        migrations.AddField(
            model_name='city',
            name='country',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.Country'),
        ),
        migrations.AddField(
            model_name='city',
            name='state',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.State'),
        ),
        migrations.AddField(
            model_name='approvalmatrixmapapprovallevelwithuserslocation',
            name='location',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.ManageBranch', verbose_name='Location'),
        ),
        migrations.AddField(
            model_name='approvalmatrixmapapprovallevelwithuserslocation',
            name='map_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.ApprovalMatrixMapApprovalLevelWithUsers', verbose_name='User Id'),
        ),
        migrations.AddField(
            model_name='approvalmatrixmapapprovallevelwithusersclienttype',
            name='client_type',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.ManageClientType', verbose_name='Client Type'),
        ),
        migrations.AddField(
            model_name='approvalmatrixmapapprovallevelwithusersclienttype',
            name='map_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.ApprovalMatrixMapApprovalLevelWithUsers', verbose_name='User Id'),
        ),
        migrations.AddField(
            model_name='approvalmatrixmapapprovallevelwithusersclientcategory',
            name='client_category',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.ManageClientCategory', verbose_name='Client Category'),
        ),
        migrations.AddField(
            model_name='approvalmatrixmapapprovallevelwithusersclientcategory',
            name='map_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.ApprovalMatrixMapApprovalLevelWithUsers', verbose_name='User Id'),
        ),
        migrations.AddField(
            model_name='applicationform',
            name='client_category',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.ManageClientCategory', verbose_name='Client Category'),
        ),
        migrations.AddField(
            model_name='applicationform',
            name='client_role',
            field=models.ForeignKey(blank=True, max_length=200, null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.UpdateTemplateRequirement', verbose_name='Client Role'),
        ),
        migrations.AddField(
            model_name='applicationform',
            name='client_type',
            field=models.ForeignKey(blank=True, max_length=200, null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.ManageClientType'),
        ),
        migrations.AddField(
            model_name='applicationform',
            name='template_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.CustomizeTemplate'),
        ),
        migrations.AddField(
            model_name='allocationuserclientsupportproducttype',
            name='product_type',
            field=models.ForeignKey(blank=True, max_length=200, null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.ManageProductType'),
        ),
        migrations.AddField(
            model_name='allocationprocessmultiplereallocation',
            name='process_name',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.DefineProcessAllocation', verbose_name='Process Name'),
        ),
        migrations.AddField(
            model_name='allocationmatrixvendorsupportusercity',
            name='city',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.City', verbose_name='City'),
        ),
        migrations.AddField(
            model_name='allocationmatrixvendorsupportusercity',
            name='vendor_support',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.AllocationMatrixVendorSupport'),
        ),
        migrations.AddField(
            model_name='allocationmatrixvendorsupportproducttype',
            name='product_type',
            field=models.ForeignKey(blank=True, max_length=200, null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.ManageProductType'),
        ),
        migrations.AddField(
            model_name='allocationmatrixvendorsupportproducttype',
            name='vendor_support',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.AllocationMatrixVendorSupport'),
        ),
        migrations.AddField(
            model_name='allocationmatrixvendorsupportproductname',
            name='product_name',
            field=models.ForeignKey(blank=True, max_length=200, null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.ManageProductName'),
        ),
        migrations.AddField(
            model_name='allocationmatrixvendorsupportproductname',
            name='vendor_support',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.AllocationMatrixVendorSupport'),
        ),
        migrations.AddField(
            model_name='allocationmatrixvendorsupportproductcategory',
            name='product_category',
            field=models.ForeignKey(blank=True, max_length=200, null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.ManageProductCategory'),
        ),
        migrations.AddField(
            model_name='allocationmatrixvendorsupportproductcategory',
            name='vendor_support',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.AllocationMatrixVendorSupport'),
        ),
        migrations.AddField(
            model_name='allocationmatrixvendorsupportclienttype',
            name='client_type',
            field=models.ForeignKey(blank=True, max_length=200, null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.ManageClientType'),
        ),
        migrations.AddField(
            model_name='allocationmatrixvendorsupportclienttype',
            name='vendor_support',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.AllocationMatrixVendorSupport'),
        ),
        migrations.AddField(
            model_name='allocationmatrixvendorsupportclientcategory',
            name='client_category',
            field=models.ForeignKey(blank=True, max_length=200, null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.ManageClientCategory'),
        ),
        migrations.AddField(
            model_name='allocationmatrixvendorsupportclientcategory',
            name='vendor_support',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.AllocationMatrixVendorSupport'),
        ),
        migrations.AddField(
            model_name='allocationmatrixsclientsupport',
            name='branch_id',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.ManageBranch', verbose_name='Branch Id'),
        ),
        migrations.AddField(
            model_name='allocationmatrixsclientsupport',
            name='client_type',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.ManageClientType', verbose_name='Client Type'),
        ),
        migrations.AddField(
            model_name='allocationmatrixsclientsupport',
            name='department',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.ManageDepartment', verbose_name='Department'),
        ),
        migrations.AddField(
            model_name='allocationmatrixsclientsupport',
            name='designation',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.ManageDesignation', verbose_name='Designation'),
        ),
        migrations.AddField(
            model_name='allocationmatrixsclientsupport',
            name='name',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.City', verbose_name='City'),
        ),
        migrations.AddField(
            model_name='allocationmatrixsclientsupport',
            name='responsibilities',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.ManageResponsibility', verbose_name='Responsibility'),
        ),
        migrations.AddField(
            model_name='allocationmatrixsclientsupport',
            name='user',
            field=models.ForeignKey(blank=True, max_length=200, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='allocationmatrixleadusercity',
            name='city',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.City', verbose_name='City'),
        ),
        migrations.AddField(
            model_name='allocationmatrixleadusercity',
            name='lead_allocation',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.AllocationMatrixLeadAllocation'),
        ),
        migrations.AddField(
            model_name='allocationmanagementupdatereallocationcriteria',
            name='process_name',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.DefineProcessAllocation', verbose_name='Process Name'),
        ),
        migrations.AddField(
            model_name='allocationmanagementmanagereallocation',
            name='reallocation_criteria',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.AllocationManagementUpdateReallocationCriteria', verbose_name='Reallocation Criteria'),
        ),
        migrations.AddField(
            model_name='allocationclientsupportusercity',
            name='city',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.City', verbose_name='City'),
        ),
        migrations.AddField(
            model_name='allocationclientsupportusercity',
            name='client_support_allocation',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.AllocationMatrixClientSupport'),
        ),
        migrations.AddField(
            model_name='allocationclientsupportproductname',
            name='client_support_allocation',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.AllocationMatrixClientSupport'),
        ),
        migrations.AddField(
            model_name='allocationclientsupportproductname',
            name='product_name',
            field=models.ForeignKey(blank=True, max_length=200, null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.ManageProductName'),
        ),
        migrations.AddField(
            model_name='allocationclientsupportproductcategory',
            name='client_support_allocation',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.AllocationMatrixClientSupport'),
        ),
        migrations.AddField(
            model_name='allocationclientsupportproductcategory',
            name='product_category',
            field=models.ForeignKey(blank=True, max_length=200, null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.ManageProductCategory'),
        ),
        migrations.AddField(
            model_name='allocationclientsupportclienttype',
            name='client_support_allocation',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.AllocationMatrixClientSupport'),
        ),
        migrations.AddField(
            model_name='allocationclientsupportclienttype',
            name='client_type',
            field=models.ForeignKey(blank=True, max_length=200, null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.ManageClientType'),
        ),
        migrations.AddField(
            model_name='allocationclientsupportclientcategory',
            name='client_category',
            field=models.ForeignKey(blank=True, max_length=200, null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.ManageClientCategory'),
        ),
        migrations.AddField(
            model_name='allocationclientsupportclientcategory',
            name='client_support_allocation',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.AllocationMatrixClientSupport'),
        ),
        migrations.AddField(
            model_name='additionaltemplate',
            name='client_category',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.ManageClientCategory', verbose_name='Client Category'),
        ),
        migrations.AddField(
            model_name='additionaltemplate',
            name='client_role',
            field=models.ForeignKey(blank=True, max_length=200, null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.UpdateTemplateRequirement', verbose_name='Client Role'),
        ),
        migrations.AddField(
            model_name='additionaltemplate',
            name='client_type',
            field=models.ForeignKey(blank=True, max_length=200, null=True, on_delete=django.db.models.deletion.CASCADE, to='hrms_management.ManageClientType'),
        ),
        migrations.AddField(
            model_name='additionaltemplate',
            name='template_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.CustomizeTemplate', verbose_name='Template Type'),
        ),
        migrations.AddField(
            model_name='user',
            name='department',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.ManageDepartment', verbose_name='Department'),
        ),
        migrations.AddField(
            model_name='user',
            name='designation',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.ManageDesignation', verbose_name='Designation'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='head_office',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.ManageHeadOfficeSetup', verbose_name='Head Office'),
        ),
        migrations.AddField(
            model_name='user',
            name='parent_company',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.CompanySetup', verbose_name='Parent Company'),
        ),
        migrations.AddField(
            model_name='user',
            name='reporting_to',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Reported To'),
        ),
        migrations.AddField(
            model_name='user',
            name='responsibilities',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.ManageResponsibility', verbose_name='Responsibility'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_role',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='hrms_management.RoleMangement', verbose_name='User Role'),
        ),
        migrations.AlterUniqueTogether(
            name='processnamewithnumberofdata',
            unique_together={('user', 'process_name')},
        ),
        migrations.AlterUniqueTogether(
            name='mapapprovallevelwithjointapproval',
            unique_together={('group_name', 'no_of_users', 'user_joint_approval')},
        ),
        migrations.AlterUniqueTogether(
            name='escalationmanagementmanageescalation',
            unique_together={('process_name', 'escalation_level', 'effect_of_escalation_level', 'escalation_to')},
        ),
        migrations.AlterUniqueTogether(
            name='allocationmanagementupdatereallocationcriteria',
            unique_together={('process_name', 'reallocation_criteria')},
        ),
        migrations.AlterUniqueTogether(
            name='allocationmanagementmanagereallocation',
            unique_together={('process_name', 'reallocation_criteria', 'new_user')},
        ),
    ]
